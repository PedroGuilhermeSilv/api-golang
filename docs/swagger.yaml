basePath: /
definitions:
  dto.ProductCreateInput:
    properties:
      name:
        type: string
      price:
        type: number
    type: object
  dto.ProductCreateOutput:
    properties:
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  dto.UserCreateInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.UserLoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.UserLoginOutput:
    properties:
      access_token:
        type: string
    type: object
  entity.Product:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  entity.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  handlers.Error:
    properties:
      message:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API documentation for the project
  title: API Documentation
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: User to login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserLoginOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
      summary: Login a user
      tags:
      - users
  /products:
    get:
      consumes:
      - application/json
      description: List products
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product to create
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ProductCreateOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - products
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
      summary: Create a new user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    description: JWT token for authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
